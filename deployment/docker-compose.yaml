services:
  api:
    container_name: ${API_HOST}
    build:
      context: ../.
      dockerfile: deployment/dockerfiles/backend.dockerfile
      args:
        APP_FOLDER: backend
        VIRTUAL_ENV_PATH: /opt/venv
        ENTRYPOINT_PATH: /deployment/entrypoints/backend_entrypoint.sh
        GUNICORN_CONF_PATH: /deployment/entrypoints/gunicorn_conf.py
    environment:
      VIRTUAL_ENV_PATH: /opt/venv
      ENV_TYPE: ${ENV_TYPE}
      POSTGRES_HOSTNAME: ${POSTGRES_HOSTNAME}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      RABBITMQ_VIRTUAL_HOST: ${RABBITMQ_VIRTUAL_HOST}
      RABBITMQ_EXCHANGE: ${RABBITMQ_EXCHANGE}
      RABBITMQ_S_QUEUE: ${RABBITMQ_S_QUEUE}
      RABBITMQ_M_QUEUE: ${RABBITMQ_M_QUEUE}
      RABBITMQ_L_QUEUE: ${RABBITMQ_L_QUEUE}
      RABBITMQ_PREFETCH_COUNT: ${RABBITMQ_PREFETCH_COUNT}
    ports:
      - '${API_PORT}:8765'
    volumes:
      - ../backend:/backend
    restart: always
    entrypoint:
      - /deployment/entrypoints/backend_entrypoint.sh
    networks:
      - backend
    healthcheck:
      test: curl --fail http://localhost:8765/api/health/ || exit 1
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s

  worker-small:
    container_name: ${WORKER_HOST}-small
    build:
      context: ../.
      dockerfile: deployment/dockerfiles/worker.dockerfile
      args:
        APP_FOLDER: backend
        VIRTUAL_ENV_PATH: /opt/venv
        ENTRYPOINT_PATH: /deployment/entrypoints/worker_entrypoint.sh
        GUNICORN_CONF_PATH: /deployment/entrypoints/gunicorn_conf.py
    environment:
      ENV_TYPE: ${ENV_TYPE}
      WORKER_RABBIT_QUEUE: S_queue
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      RABBITMQ_VIRTUAL_HOST: ${RABBITMQ_VIRTUAL_HOST}
      RABBITMQ_PREFETCH_COUNT: ${RABBITMQ_PREFETCH_COUNT}
    ports:
      - '8860:8000'
    volumes:
      - ../backend:/backend
    restart: always
    entrypoint:
      - /deployment/entrypoints/worker_entrypoint.sh
    networks:
      - backend

  worker-medium:
    container_name: ${WORKER_HOST}-medium
    build:
      context: ../.
      dockerfile: deployment/dockerfiles/worker.dockerfile
      args:
        APP_FOLDER: backend
        VIRTUAL_ENV_PATH: /opt/venv
        ENTRYPOINT_PATH: /deployment/entrypoints/worker_entrypoint.sh
        GUNICORN_CONF_PATH: /deployment/entrypoints/gunicorn_conf.py
    environment:
      ENV_TYPE: ${ENV_TYPE}
      WORKER_RABBIT_QUEUE: M_queue
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      RABBITMQ_VIRTUAL_HOST: ${RABBITMQ_VIRTUAL_HOST}
      RABBITMQ_PREFETCH_COUNT: ${RABBITMQ_PREFETCH_COUNT}
    ports:
      - '8861:8000'
    volumes:
      - ../backend:/backend
    restart: always
    entrypoint:
      - /deployment/entrypoints/worker_entrypoint.sh
    networks:
      - backend

  worker-large:
    container_name: ${WORKER_HOST}-large
    build:
      context: ../.
      dockerfile: deployment/dockerfiles/worker.dockerfile
      args:
        APP_FOLDER: backend
        VIRTUAL_ENV_PATH: /opt/venv
        ENTRYPOINT_PATH: /deployment/entrypoints/worker_entrypoint.sh
        GUNICORN_CONF_PATH: /deployment/entrypoints/gunicorn_conf.py
    environment:
      ENV_TYPE: ${ENV_TYPE}
      WORKER_RABBIT_QUEUE: L_queue
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      RABBITMQ_VIRTUAL_HOST: ${RABBITMQ_VIRTUAL_HOST}
      RABBITMQ_PREFETCH_COUNT: ${RABBITMQ_PREFETCH_COUNT}
    ports:
      - '8862:8000'
    volumes:
      - ../backend:/backend
    restart: always
    entrypoint:
      - /deployment/entrypoints/worker_entrypoint.sh
    networks:
      - backend


  postgres:
    image: postgres
    container_name: ${POSTGRES_HOSTNAME}
    restart: always
    env_file: .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOSTNAME: ${POSTGRES_HOSTNAME}
      POSTGRES_PORT: ${POSTGRES_PORT}
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 5s
    networks:
      - backend

  rabbitmq:
    image: rabbitmq:3-management
    container_name: ${RABBITMQ_HOST}
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    ports:
      - "${RABBITMQ_PORT}:5672"   # RabbitMQ (AMQP) protocol
      - "15672:15672" # Management UI
    volumes:
      - ./rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - backend

  loki:
    image: grafana/loki
    container_name: loki
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"
    volumes:
      - ./loki_data:/loki
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:3100/ready" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    networks:
      - backend

  promtail:
    image: grafana/promtail
    container_name: promtail
    depends_on:
      loki:
        condition: service_healthy
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./configs/promtail-config.yaml:/etc/promtail/promtail-docker-config.yaml:ro
    command: -config.file=/etc/promtail/promtail-docker-config.yaml
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:9080/ready" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    networks:
      - backend

  grafana:
    image: grafana/grafana
    container_name: grafana
    depends_on:
      loki:
        condition: service_healthy
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${GF_SECURITY_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD}
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:3000/api/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    volumes:
      - ./grafana_data:/var/lib/grafana
    networks:
      - backend

networks:
  backend:
    driver: bridge

# docker compose up --scale locust-worker=4

#
#  mongo-db:
#    image: mongo:6
#    container_name: mongo-db
#    restart: always
#    env_file: .env
#    environment:
#      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
#      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
#      MONGO_INITDB_DATABASE: ${MONGO_DB}
#    volumes:
#      - ./mongo_data:/data/db
#    ports:
#      - '${MONGO_PORT}:${MONGO_PORT}'
#    networks:
#      - backend
#    healthcheck:
#      test: [ "CMD", "mongo", "--eval", "db.runCommand({ ping: 1 })" ]
#      interval: 30s
#      timeout: 10s
#      retries: 5
#      start_period: 5s
