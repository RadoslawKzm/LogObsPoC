services:
  api:
    container_name: api
    build:
      context: ../.
      dockerfile: deployment/dockerfiles/backend.dockerfile
      args:
        APP_FOLDER: backend
        VIRTUAL_ENV_PATH: /opt/venv
        ENTRYPOINT_PATH: /deployment/entrypoints/backend_entrypoint.sh
#    env_file: ./backend.env
    environment:
      VIRTUAL_ENV_PATH: /opt/venv
      APP_PORT: ${FASTAPI_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOSTNAME: ${POSTGRES_HOSTNAME}
      POSTGRES_PORT: ${POSTGRES_PORT}
    ports: # Host -> Container
      - '${FASTAPI_PORT}:${FASTAPI_PORT}'
    volumes:
      - ../backend:/backend
#      - ../deployment:/deployment
    restart: always
    entrypoint:
      - /deployment/entrypoints/backend_entrypoint.sh
#      - /opt/venv
    networks:
      - backend
    healthcheck:
      test: curl --fail http://localhost:8765/api/health/ || exit 1
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
#    stdin_open: true # docker run -i
#    tty: true        # docker run -t

  postgres:
    image: postgres
    container_name: ${POSTGRES_CONTAINER}
    restart: always
    env_file: .env  # Load environment variables from the .env file
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOSTNAME: ${POSTGRES_HOSTNAME}
      POSTGRES_PORT: ${POSTGRES_PORT}
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
    ports: # Host -> Container
      - "${POSTGRES_EXPOSE_PORT}:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 5s
    networks:
      - backend

volumes:
  postgres_data:
#    driver: local
#    driver_opts:
#      type: none
#      device: ./postgres_data/
#      o: bind

networks:
  backend:
    driver: bridge

# docker compose up --scale locust-worker=4

#
#  mongo-db:
#    image: mongo:6
#    container_name: mongo-db
#    restart: always
#    env_file: .env
#    environment:
#      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
#      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
#      MONGO_INITDB_DATABASE: ${MONGO_DB}
#    volumes:
#      - ./mongo_data:/data/db
#    ports:
#      - '${MONGO_PORT}:${MONGO_PORT}'
#    networks:
#      - backend
#    healthcheck:
#      test: [ "CMD", "mongo", "--eval", "db.runCommand({ ping: 1 })" ]
#      interval: 30s
#      timeout: 10s
#      retries: 5
#      start_period: 5s
